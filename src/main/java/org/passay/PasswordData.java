/* See LICENSE for licensing and NOTICE for copyright. */
package org.passay;

import java.nio.Buffer;
import java.nio.CharBuffer;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.Objects;
import java.util.stream.Collectors;

/**
 * Contains password related information used by rules to perform password validation.
 *
 * @author  Middleware Services
 */
public final class PasswordData
{

  /** Enum to define the origin of a password. */
  public enum Origin {

    /** a password which was generated by a typical human user. */
    User,

    /** a password which was generated by a sufficient random source. */
    Generated
  }

  /** Stores the password. */
  private final UnicodeString password;

  /** Stores the username. */
  private final UnicodeString username;

  /** Password references. */
  private final List<Reference> passwordReferences = new ArrayList<>();

  /** Origin of this password. */
  private final Origin origin;


  /**
   * Creates a new password data. The origin of this data is assumed to be {@link Origin#User} by default.
   *
   * @param  password  password
   */
  public PasswordData(final String password)
  {
    this(new UnicodeString(password));
  }


  /**
   * Creates a new password data. The origin of this data is assumed to be {@link Origin#User} by default.
   *
   * @param  password  password
   */
  public PasswordData(final UnicodeString password)
  {
    this(null, password, Origin.User, Collections.emptyList());
  }


  /**
   * Creates a new password data. The origin of this data is assumed to be {@link Origin#User} by default.
   *
   * @param  username  username
   * @param  password  password
   */
  public PasswordData(final String username, final String password)
  {
    this(new UnicodeString(username), new UnicodeString(password));
  }


  /**
   * Creates a new password data. The origin of this data is assumed to be {@link Origin#User} by default.
   *
   * @param  username  username
   * @param  password  password
   */
  public PasswordData(final UnicodeString username, final UnicodeString password)
  {
    this(username, password, Origin.User, Collections.emptyList());
  }


  /**
   * Creates a new password data.
   *
   * @param  password  password
   * @param  origin  origin
   */
  public PasswordData(final String password, final Origin origin)
  {
    this(new UnicodeString(password), origin);
  }


  /**
   * Creates a new password data.
   *
   * @param  password  password
   * @param  origin  origin
   */
  public PasswordData(final UnicodeString password, final Origin origin)
  {
    this(null, password, origin, Collections.emptyList());
  }


  /**
   * Creates a new password data.
   *
   * @param  username  username
   * @param  password  password
   * @param  origin  origin
   */
  public PasswordData(final String username, final String password, final Origin origin)
  {
    this(new UnicodeString(username), new UnicodeString(password), origin);
  }


  /**
   * Creates a new password data.
   *
   * @param  username  username
   * @param  password  password
   * @param  origin  origin
   */
  public PasswordData(final UnicodeString username, final UnicodeString password, final Origin origin)
  {
    this(username, password, origin, Collections.emptyList());
  }


  /**
   * Creates a new password data.
   *
   * @param  username  username
   * @param  password  password
   * @param  references  references
   */
  public PasswordData(final String username, final String password, final Reference... references)
  {
    this(new UnicodeString(username), new UnicodeString(password), references);
  }


  /**
   * Creates a new password data.
   *
   * @param  username  username
   * @param  password  password
   * @param  references  references
   */
  public PasswordData(final UnicodeString username, final UnicodeString password, final Reference... references)
  {
    this(username, password, Origin.User, Arrays.asList(references));
  }


  /**
   * Creates a new password data.
   *
   * @param  username  username
   * @param  password  password
   * @param  references  references
   */
  public PasswordData(final String username, final String password, final List<Reference> references)
  {
    this(new UnicodeString(username), new UnicodeString(password), references);
  }


  /**
   * Creates a new password data.
   *
   * @param  username  username
   * @param  password  password
   * @param  references  references
   */
  public PasswordData(final UnicodeString username, final UnicodeString password, final List<Reference> references)
  {
    this(username, password, Origin.User, references);
  }


  /**
   * Creates a new password data.
   *
   * @param  username  username
   * @param  password  password
   * @param  origin  origin
   * @param  references  references
   */
  public PasswordData(
    final String username, final String password, final Origin origin, final Reference... references)
  {
    this(new UnicodeString(username), new UnicodeString(password), origin, references);
  }


  /**
   * Creates a new password data.
   *
   * @param  username  username
   * @param  password  password
   * @param  origin  origin
   * @param  references  references
   */
  public PasswordData(
    final UnicodeString username, final UnicodeString password, final Origin origin, final Reference... references)
  {
    this(username, password, origin, Arrays.asList(references));
  }


  /**
   * Creates a new password data.
   *
   * @param  username  username
   * @param  password  password
   * @param  origin  origin
   * @param  references  references
   */
  public PasswordData(
    final String username, final String password, final Origin origin, final List<Reference> references)
  {
    this(new UnicodeString(username), new UnicodeString(password), origin, references);
  }


  /**
   * Creates a new password data.
   *
   * @param  username  username
   * @param  password  password
   * @param  origin  origin
   * @param  references  references
   */
  public PasswordData(
    final UnicodeString username, final UnicodeString password, final Origin origin, final List<Reference> references)
  {
    this.username = username;
    this.password = PassayUtils.assertNotNullArg(password, "Password cannot be null");
    this.origin = PassayUtils.assertNotNullArg(origin, "Origin cannot be null");
    if (references != null) {
      this.passwordReferences.addAll(
        PassayUtils.assertNotNullArgOr(
          references,
          v -> v.stream().anyMatch(Objects::isNull),
          "Reference values cannot be null or contain null"));
    }
  }


  /**
   * Returns the password.
   *
   * @return  password
   */
  public UnicodeString getPassword()
  {
    return password;
  }


  /**
   * Returns the number of code points in the password.
   *
   * @return  code points in the password
   */
  public int getCharacterCount()
  {
    return password.length();
  }


  /**
   * Returns the origin.
   *
   * @return  origin
   */
  public Origin getOrigin()
  {
    return origin;
  }


  /**
   * Returns the username.
   *
   * @return  username
   */
  public UnicodeString getUsername()
  {
    return username;
  }


  /**
   * Returns the password references.
   *
   * @return  password references
   */
  public List<Reference> getPasswordReferences()
  {
    return Collections.unmodifiableList(passwordReferences);
  }


  /**
   * Returns the password references that match the supplied reference type.
   *
   * @param  <T>  type of password reference
   * @param  type  of reference to match
   *
   * @return  unmodifiable list of password references
   */
  @SuppressWarnings("unchecked")
  public <T extends Reference> List<T> getPasswordReferences(final Class<T> type)
  {
    final List<T> l = passwordReferences.stream().filter(
      type::isInstance).map(r -> (T) r).collect(Collectors.toList());
    return Collections.unmodifiableList(l);
  }


  /**
   * Clears the memory of the underlying objects in this password data. See {@link UnicodeString#clear()}.
   */
  public void clear()
  {
    if (password != null) {
      password.clear();
    }
    if (username != null) {
      username.clear();
    }
    passwordReferences.forEach(Reference::clear);
  }


  /**
   * Returns a new password data initialized with the supplied data.
   *
   * @param  data  password data to read properties from
   *
   * @return  new password data
   */
  public static PasswordData copy(final PasswordData data)
  {
    return new PasswordData(
      data.getUsername(), data.getPassword(), data.getOrigin(), data.getPasswordReferences());
  }


  @Override
  public String toString()
  {
    return getClass().getName() + "@" + hashCode() + "::" +
      "username=" + username + ", " +
      "password=" + password + ", " +
      "origin=" + origin + ", " +
      "passwordReferences=" + passwordReferences;
  }


  /**
   * Combines salt (additional external data) with a password
   * before applying a digest algorithm to them.
   */
  public interface Salt
  {

    /**
     * Applies the salt to the password, returning the combined string to be digested.
     *
     * @param password the cleartext password to apply the salt to
     * @return the salted password
     */
    CharBuffer applyTo(CharBuffer password);
  }


  /**
   * A salt that is concatenated as a prefix to the password data.
   */
  public static class PrefixSalt implements Salt
  {

    /** The salt data. */
    private final String salt;

    /**
     * Creates a new salt with the given salt data.
     *
     * @param slt the salt data
     */
    public PrefixSalt(final String slt)
    {
      salt = slt;
    }

    @Override
    public CharBuffer applyTo(final CharBuffer password)
    {
      final CharBuffer salted = CharBuffer.allocate(salt.length() + password.length());
      salted.put(salt).put(password);
      ((Buffer) salted).flip();
      return salted;
    }
  }


  /**
   * A salt that is concatenated as a suffix to the password data.
   */
  public static class SuffixSalt implements Salt
  {

    /** The salt data. */
    private final String salt;

    /**
     * Creates a new salt with the given salt data.
     *
     * @param salt the salt data
     */
    public SuffixSalt(final String salt)
    {
      this.salt = salt;
    }

    @Override
    public CharBuffer applyTo(final CharBuffer password)
    {
      final CharBuffer salted = CharBuffer.allocate(salt.length() + password.length());
      salted.put(password).put(salt);
      ((Buffer) salted).flip();
      return salted;
    }
  }


  /** Reference to another password. */
  public interface Reference
  {

    /**
     * Returns the password associated with this reference.
     *
     * @return  password string
     */
    UnicodeString getPassword();


    /**
     * Clears the memory of the underlying objects in this reference.
     */
    void clear();


    /**
     * Returns the salt that was applied to the reference password before digesting it.
     *
     * @return  salt  the salt that was applied to the password,
     *          or null if no salt was applied
     */
    default Salt getSalt()
    {
      return null;
    }
  }


  /** Reference to an historical password. */
  public static class HistoricalReference extends AbstractReference
  {


    /**
     * Creates a new historical reference.
     *
     * @param  password  password string
     */
    public HistoricalReference(final String password)
    {
      super(null, password);
    }


    /**
     * Creates a new historical reference.
     *
     * @param  password  password string
     */
    public HistoricalReference(final UnicodeString password)
    {
      super(null, password);
    }


    /**
     * Creates a new historical reference.
     *
     * @param  label  label for this password
     * @param  password  password string
     */
    public HistoricalReference(final String label, final String password)
    {
      super(label, password);
    }


    /**
     * Creates a new historical reference.
     *
     * @param  label  label for this password
     * @param  password  password string
     */
    public HistoricalReference(final String label, final UnicodeString password)
    {
      super(label, password);
    }


    /**
     * Creates a new historical reference.
     *
     * @param  label  label for this password
     * @param  password  password string
     * @param  salt  salt that was applied to password
     */
    public HistoricalReference(final String label, final String password, final Salt salt)
    {
      super(label, password, salt);
    }


    /**
     * Creates a new historical reference.
     *
     * @param  label  label for this password
     * @param  password  password string
     * @param  salt  salt that was applied to password
     */
    public HistoricalReference(final String label, final UnicodeString password, final Salt salt)
    {
      super(label, password, salt);
    }
  }


  /** Reference to a source password. */
  public static class SourceReference extends AbstractReference
  {


    /**
     * Creates a new source reference.
     *
     * @param  password  password string
     */
    public SourceReference(final String password)
    {
      super(null, password);
    }


    /**
     * Creates a new source reference.
     *
     * @param  password  password string
     */
    public SourceReference(final UnicodeString password)
    {
      super(null, password);
    }


    /**
     * Creates a new source reference.
     *
     * @param  label  label for this password
     * @param  password  password string
     */
    public SourceReference(final String label, final String password)
    {
      super(label, password);
    }


    /**
     * Creates a new source reference.
     *
     * @param  label  label for this password
     * @param  password  password string
     */
    public SourceReference(final String label, final UnicodeString password)
    {
      super(label, password);
    }


    /**
     * Creates a new source reference.
     *
     * @param  label  label for this password
     * @param  password  password string
     * @param  salt  salt that was applied to password
     */
    public SourceReference(final String label, final String password, final Salt salt)
    {
      super(label, password, salt);
    }


    /**
     * Creates a new source reference.
     *
     * @param  label  label for this password
     * @param  password  password string
     * @param  salt  salt that was applied to password
     */
    public SourceReference(final String label, final UnicodeString password, final Salt salt)
    {
      super(label, password, salt);
    }
  }


  /** Common password reference implementation. */
  public abstract static class AbstractReference implements Reference
  {

    /** Label to identify this password. */
    private final String label;

    /** Reference password. */
    private final UnicodeString password;

    /** Salt that was applied to reference password before digesting it. */
    private final Salt salt;


    /**
     * Creates a new abstract reference.
     *
     * @param  label  label for this password
     * @param  password  password string
     */
    public AbstractReference(final String label, final String password)
    {
      this(label, password, null);
    }


    /**
     * Creates a new abstract reference.
     *
     * @param  label  label for this password
     * @param  password  password string
     */
    public AbstractReference(final String label, final UnicodeString password)
    {
      this(label, password, null);
    }


    /**
     * Creates a new abstract reference.
     *
     * @param  label  label for this password
     * @param  password  password string
     * @param  salt  salt that was applied to password
     */
    public AbstractReference(final String label, final String password, final Salt salt)
    {
      this(label, new UnicodeString(password), salt);
    }


    /**
     * Creates a new abstract reference.
     *
     * @param  label  label for this password
     * @param  password  password string
     * @param  salt  salt that was applied to password
     */
    public AbstractReference(final String label, final UnicodeString password, final Salt salt)
    {
      this.label = label;
      this.password = password;
      this.salt = salt;
    }


    /**
     * Returns the label.
     *
     * @return  reference label
     */
    public String getLabel()
    {
      return label;
    }


    @Override
    public UnicodeString getPassword()
    {
      return password;
    }


    @Override
    public Salt getSalt()
    {
      return salt;
    }


    @Override
    public String toString()
    {
      return getClass().getName() + "@" + hashCode() + "::" +
        "label=" + label + ", " +
        "password=" + password + ", " +
        "salt=" + salt;
    }


    @Override
    public void clear()
    {
      if (password != null) {
        password.clear();
      }
    }
  }
}
